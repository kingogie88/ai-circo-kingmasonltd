name: Plastic Recycling CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.8'

# Top level permissions used as a default
permissions:
  contents: write
  packages: read
  pull-requests: write
  issues: write
  checks: write
  id-token: write # Required for authentication
  actions: read   # Required for workflow runs

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]
        
    - name: Setup test environment
      run: |
        # Create necessary directories
        mkdir -p models
        mkdir -p src/{vision,robotics,safety_monitoring}
        
        # Create empty model file
        touch models/yolov8_plastic.pt
        
        # Create __init__.py files
        touch src/__init__.py
        touch src/vision/__init__.py
        touch src/robotics/__init__.py
        touch src/safety_monitoring/__init__.py
        touch tests/__init__.py
        
        # Set PYTHONPATH
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: read
      id-token: write
      actions: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy application
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Deploying version ${{ github.sha }}"
        # Install the built package
        pip install dist/*.whl
        # Start the application in the background
        nohup python -m src.main > app.log 2>&1 &
        # Wait for application to start
        sleep 10
        # Store the PID
        echo $! > app.pid
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        # More robust health check
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Health check passed"
            exit 0
          fi
          echo "Attempt $i failed, retrying..."
          sleep 5
        done
        echo "Health check failed after 5 attempts"
        exit 1
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
        fi

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write  # Needed if posting results to PR
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
    
    - name: Check formatting
      continue-on-error: true  # Don't fail the workflow for style issues
      run: |
        black --check --diff src tests
        isort --check-only --diff src tests
        flake8 src tests
        mypy src 